datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Usuario {
  id                  Int                @id @default(autoincrement())
  nombres             String             @db.VarChar(200)
  apellidos           String             @db.VarChar(200)
  contrase침a          String             @db.VarChar(255)
  correoElectronico   String             @map("correo_electronico") @db.VarChar(100)
  telefono            String?            @db.VarChar(20)
  rol                 Rol                @default(ciudadano)

  // Datos exclusivos de ciudadanos
  direccion           String?            @db.VarChar(50) 
  barrio             String?            @db.VarChar(50)
  historialReciclaje String?            @map("historial_reciclaje") @db.VarChar(100)
  estado             EstadoCiudadano     @default(activo)

  // Relaciones
  encuestasCreadas    Encuesta[]         @relation("EncuestaCreador")
  respuestasEncuestas RespuestaEncuesta[] @relation(name: "UsuarioEncuesta")
  respuestasCiudadano RespuestaEncuesta[] @relation(name: "CiudadanoEncuesta") // Nueva relaci칩n
  incidenciasAsignadas Incidencias[]     @relation("UsuarioAsignado")
  pqrsCreadas         Pqrs[]            @relation("CreadorPqrs")
  pqrsModificadas     Pqrs[]            @relation("ModificadorPqrs")
  pqrsRecibidas       Pqrs[]            @relation("CiudadanoPqrs") // Nueva relaci칩n
  incidenciasCreadas  Incidencias[]     @relation("CreadorIncidencia")
  incidenciasModificadas Incidencias[]  @relation("ModificadorIncidencia")
  incidenciasCiudadano  Incidencias[]   @relation("CiudadanoIncidencia") // Nueva relaci칩n
  registrosRecoleccion RegistroDeRecoleccionEnFuentes[] @relation("Responsable")
  registrosFuente     RegistroDeRecoleccionEnFuentes[] @relation("ResponsableFuente")
  registrosOperativos RegistroOperativoEnRuta[]
}

enum Rol {
  administrador
  recolector
  ciudadano
  encuestador 
  encuestado 
}

enum EstadoCiudadano {
  activo
  inactivo
}


model Residuos {
  id              Int       @id @default(autoincrement()) @map("id_residuos")
  tipoDeResiduo   String    @map("tipo_de_residuo") @db.VarChar(100)
  ubicacion       String    @db.VarChar(100)
  cantidad        Int
  estado          EstadoResiduo
  fechaRegistro   DateTime  @default(now()) @map("fecha_registro")

  @@index([tipoDeResiduo])
}

enum EstadoResiduo {
  disponible
  en_proceso
  reciclado
}

model Encuesta {
  id               Int               @id @default(autoincrement())
  titulo           String            @db.VarChar(200)
  descripcion      String?           @db.Text
  fechaCreacion    DateTime          @default(now())
  fechaExpiracion  DateTime?
  estado           EstadoEncuesta    @default(activa)
  creador          Usuario           @relation("EncuestaCreador", fields: [creadorId], references: [id])
  creadorId        Int
  preguntas        Pregunta[]
  respuestas       RespuestaEncuesta[]

  @@map("encuestas")
}

enum EstadoEncuesta {
  activa
  inactiva
  borrador
  finalizada
}

enum TipoPregunta {
  opcion_multiple
  seleccion_unica
  texto_libre
  escala
  si_no
}

model Pregunta {
  id              Int               @id @default(autoincrement())
  encuestaId      Int
  encuesta        Encuesta          @relation(fields: [encuestaId], references: [id], onDelete: Cascade)
  texto           String            @db.Text
  tipo            TipoPregunta
  requerida       Boolean           @default(true)
  orden           Int
  opciones        OpcionPregunta[]
  respuestas      RespuestaPregunta[]

  @@map("preguntas")
}

model OpcionPregunta {
  id          Int       @id @default(autoincrement())
  preguntaId  Int
  pregunta    Pregunta  @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
  texto       String    @db.VarChar(200)
  orden       Int
  respuestas  RespuestaPregunta[]

  @@map("opciones_preguntas")
}

model RespuestaEncuesta {
  id              Int               @id @default(autoincrement())
  encuestaId      Int
  encuesta        Encuesta          @relation(fields: [encuestaId], references: [id])
  usuarioId       Int
  usuario     Usuario  @relation(name: "UsuarioEncuesta", fields: [usuarioId], references: [id])
  ciudadanoId     Int?              @map("ciudadano_id")
  ciudadano       Usuario?          @relation(name: "CiudadanoEncuesta", fields: [ciudadanoId], references: [id])
  fechaRespuesta  DateTime          @default(now())
  respuestas      RespuestaPregunta[]
  completada      Boolean           @default(false)

  @@map("respuestas_encuestas")
}


model RespuestaPregunta {
  id                  Int               @id @default(autoincrement())
  respuestaEncuestaId Int
  respuestaEncuesta   RespuestaEncuesta @relation(fields: [respuestaEncuestaId], references: [id], onDelete: Cascade)
  preguntaId          Int
  pregunta            Pregunta          @relation(fields: [preguntaId], references: [id])
  opcionSeleccionadaId Int?
  opcionSeleccionada  OpcionPregunta?   @relation(fields: [opcionSeleccionadaId], references: [id])
  textoRespuesta      String?           @db.Text
  valorEscala         Int?

  @@map("respuestas_preguntas")
}

model Pqrs {
  id                  Int       @id @default(autoincrement()) @map("id_solicitud")
  descripcion         String    @db.Text
  motivo             String    @db.VarChar(200)
  categoria          CategoriaPqrs
  estado             EstadoPqrs @default(Abierto)
  seguimiento        String?   @db.VarChar(255)
  fechaCreacion      DateTime  @default(now()) @map("fecha_creacion")
  ciudadano          Usuario   @relation("CiudadanoPqrs", fields: [idCiudadano], references: [id], onDelete: Cascade)
  idCiudadano        Int       @map("id_ciudadano")
  creador            Usuario   @relation("CreadorPqrs", fields: [idUsuarioCreador], references: [id])
  idUsuarioCreador   Int       @map("id_usuario_creador")
  modificador        Usuario?  @relation("ModificadorPqrs", fields: [idUsuarioModificador], references: [id])
  idUsuarioModificador Int?    @map("id_usuario_modificador")

  @@index([estado, fechaCreacion])
}

enum CategoriaPqrs {
  Reclamo
  Peticion
  Queja
  Sugerencia
}

enum EstadoPqrs {
  Abierto
  En_proceso
  Cerrado
}

model RegistroDeRecoleccionEnFuentes {
  id                  Int      @id @default(autoincrement())
  fecha               DateTime @db.Date
  recipiente          String   @db.VarChar(100)
  pesoVacio          Decimal  @map("peso_vacio") @db.Decimal(10,5)
  pesoLleno          Decimal  @map("peso_lleno") @db.Decimal(10,5)
  observacion         String   @db.Text
  responsable         Usuario  @relation("Responsable", fields: [idResponsable], references: [id], onDelete: Cascade)
  idResponsable       Int      @map("id_responsable")
  responsableFuente   Usuario  @relation("ResponsableFuente", fields: [idResponsableFuente], references: [id], onDelete: Cascade)
  idResponsableFuente Int      @map("id_responsable_fuente")
}

model RegistroOperativoEnRuta {
  id                     Int      @id @default(autoincrement())
  item                   Int
  barrioVereda          String   @map("barrio_vereda") @db.VarChar(200)
  operario              Usuario  @relation(fields: [idOperario], references: [id], onDelete: Cascade)
  idOperario            Int      @map("id_operario")
  nroRuta               Int      @map("nro_ruta")
  inicioRecorrido       DateTime @map("inicio_recorrido")
  finRecorrido          DateTime @map("fin_recorrido")
  nroCasasVisitadas     Int      @map("nro_casas_visitadas")
  totalResiduosRecolectados Int  @map("total_residuos_recolectados")
  observacion           String   @db.Text
}

model Multimedia {
  id            Int       @id @default(autoincrement()) @map("id_multimedia")
  url           String   @map("url_archivo") @db.VarChar(200)
  tamanoArchivo Decimal   @map("tamano_archivo") @db.Decimal(10,2)
}


model Incidencias {
  id                  Int       @id @default(autoincrement()) @map("id_incidencia")
  fechaIncidencia     DateTime  @map("fecha_incidencia")
  tituloIncidencia    String    @map("titulo_incidencia") @db.VarChar(200)
  descripcionIncidencia String  @map("descripcion_incidencia") @db.Text
  tipoIncidencia      String    @map("tipo_incidencia") @db.VarChar(200)
  estadoIncidencia    EstadoIncidencia @default(abierta) @map("estado_incidencia")
  usuarioAsignado     Usuario?  @relation("UsuarioAsignado", fields: [idUsuario], references: [id])
  idUsuario           Int?      @map("id_usuario")
  ciudadano           Usuario?  @relation("CiudadanoIncidencia", fields: [idUsuarioCiudadano], references: [id])
  idUsuarioCiudadano  Int?      @map("id_usuario_ciudadano")
  creador             Usuario   @relation("CreadorIncidencia", fields: [idUsuarioCreador], references: [id])
  idUsuarioCreador    Int       @map("id_usuario_creador")
  modificador         Usuario?  @relation("ModificadorIncidencia", fields: [idUsuarioModificador], references: [id])
  idUsuarioModificador Int?     @map("id_usuario_modificador")
}

enum EstadoIncidencia {
  abierta
  en_progreso
  cerrada
}

model Cliente {
  id            Int      @id @default(autoincrement()) @map("id_cliente")
  nombre        String   @db.VarChar(100)
  apellido      String   @db.VarChar(100)
  correo        String   @unique @db.VarChar(150)
  telefono      String   @db.VarChar(20)
  direccion     String?  @db.Text
  fechaRegistro DateTime @default(now()) @map("fecha_registro")
  pagos         Pagos[]
}

model Pagos {
  id               Int       @id @default(autoincrement()) @map("id_pago")
  cliente          Cliente?  @relation(fields: [idCliente], references: [id], onDelete: Cascade)
  idCliente        Int?      @map("id_cliente")
  fechaPago        DateTime  @map("fecha_pago") @db.Date
  descripcion      String?   @db.VarChar(300)
  montoDeuda       Decimal   @default(0.00) @map("monto_deuda") @db.Decimal(10,2)
  valorPago        Decimal   @default(0.00) @map("monto_pago")  @db.Decimal(10,2)
  saldoPendiente   Decimal   @default(0.00) @map("monto_saldo")  @db.Decimal(10,2)
  interesMora      Decimal   @default(0.00) @map("interes_mora") @db.Decimal(10,2)
  metodoPago       MetodoPago @map("metodo_pago")
  diasMora         Int       @default(0) @map("dias_mora")
  estadoPago       EstadoPago @default(pendiente) @map("estado_pago")
  notas            String?   @db.VarChar(255)
  frecuenciaDePago FrecuenciaPago? @map("frecuencia_de_pago")
  fechaProximoPago DateTime? @map("fecha_proximo_pago") @db.Date
}

enum MetodoPago {
  efectivo
  tarjeta
  transferencia
  paypal
  otro
}

enum EstadoPago {
  pendiente
  pagado
  vencido
  cancelado
}

enum FrecuenciaPago {
  mensual
  trimestral
  semestral
  anual
}

model Ubicaciones {
  id        Int       @id @default(autoincrement()) @map("id_ubicacion")
  nombre    String    @db.VarChar(255)
  latitud   Decimal?  @db.Decimal(10,6)
  longitud  Decimal?  @db.Decimal(10,6)
  tipo      TipoUbicacion
  rutasInicio Rutas[] @relation("InicioRuta")
  rutasFin    Rutas[] @relation("FinRuta")
  paradas     Paradas[]
}

enum TipoUbicacion {
  parada
  inicio
  fin
}

model Rutas {
  id        Int         @id @default(autoincrement()) @map("id_ruta")
  nombre    String      @db.VarChar(255)
  inicio    Ubicaciones @relation("InicioRuta", fields: [idInicio], references: [id], onDelete: Cascade)
  idInicio  Int         @map("id_inicio")
  fin       Ubicaciones @relation("FinRuta", fields: [idFin], references: [id], onDelete: Cascade)
  idFin     Int         @map("id_fin")
  paradas   Paradas[]
}

model Paradas {
  ruta       Rutas       @relation(fields: [idRuta], references: [id], onDelete: Cascade)
  idRuta     Int         @map("id_ruta")
  ubicacion  Ubicaciones @relation(fields: [idUbicacion], references: [id], onDelete: Cascade)
  idUbicacion Int        @map("id_ubicacion")
  orden      Int

  @@id([idRuta, idUbicacion])
}

model Autos {
  id     Int     @id @default(autoincrement()) @map("id_auto")
  modelo String  @db.VarChar(50)
  placa  String  @unique @db.VarChar(20)
}
