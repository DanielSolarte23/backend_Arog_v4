generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                     Int                 @id @default(autoincrement())
  nombres                String              @db.VarChar(200)
  apellidos              String              @db.VarChar(200)
  contrase√±a            String              @db.VarChar(255)
  correoElectronico      String              @unique @map("correo_electronico") @db.VarChar(100)
  telefono               String?             @db.VarChar(20)
  rol                    Rol                 @default(ciudadano)
  direccion              String?             @db.VarChar(50)
  barrio                 String?             @db.VarChar(50)
  historialReciclaje     String?             @map("historial_reciclaje") @db.VarChar(100)
  estado                 EstadoCiudadano     @default(activo)
  googleId               String?             @db.VarChar(100)
  incidenciasCiudadano   Incidencias[]       @relation("CiudadanoIncidencia")
  incidenciasCreadas     Incidencias[]       @relation("CreadorIncidencia")
  incidenciasAsignadas   Incidencias[]       @relation("UsuarioAsignado")
  incidenciasModificadas Incidencias[]       @relation("ModificadorIncidencia")
  pqrsRecibidas          Pqrs[]              @relation("CiudadanoPqrs")
  pqrsCreadas            Pqrs[]              @relation("CreadorPqrs")
  pqrsModificadas        Pqrs[]              @relation("ModificadorPqrs")
  rutas                  Rutas[]
  encuestasCreadas       Encuesta[]          @relation("EncuestaCreador")
  formularioTiposCreados FormularioTipo[]    @relation("CreadorFormularioTipo")
  formulariosCreados     Formulario[]        @relation("CreadorFormulario")
  respuestasCiudadano    RespuestaEncuesta[] @relation("CiudadanoEncuesta")
  respuestasEncuestas    RespuestaEncuesta[] @relation("UsuarioEncuesta")
  tareasAsignadas        Tarea[]             @relation("TareaAsignado")
  tareasCreadas          Tarea[]             @relation("TareaCreador")
}

model Residuos {
  id            Int           @id @default(autoincrement()) @map("id_residuos")
  tipoDeResiduo String        @map("tipo_de_residuo") @db.VarChar(100)
  ubicacion     String        @db.VarChar(100)
  cantidad      Int
  estado        EstadoResiduo
  fechaRegistro DateTime      @default(now()) @map("fecha_registro")

  @@index([tipoDeResiduo])
}

model Encuesta {
  id              Int                 @id @default(autoincrement())
  titulo          String              @db.VarChar(200)
  descripcion     String?
  fechaCreacion   DateTime            @default(now())
  fechaExpiracion DateTime?
  estado          EstadoEncuesta      @default(activa)
  creadorId       Int
  creador         Usuario             @relation("EncuestaCreador", fields: [creadorId], references: [id])
  preguntas       Pregunta[]
  respuestas      RespuestaEncuesta[]

  @@map("encuestas")
}

model Pregunta {
  id         Int                 @id @default(autoincrement())
  encuestaId Int
  texto      String
  tipo       TipoPregunta
  requerida  Boolean             @default(true)
  orden      Int
  opciones   OpcionPregunta[]
  encuesta   Encuesta            @relation(fields: [encuestaId], references: [id], onDelete: Cascade)
  respuestas RespuestaPregunta[]

  @@map("preguntas")
}

model OpcionPregunta {
  id         Int                 @id @default(autoincrement())
  preguntaId Int
  texto      String              @db.VarChar(200)
  orden      Int
  pregunta   Pregunta            @relation(fields: [preguntaId], references: [id], onDelete: Cascade)
  respuestas RespuestaPregunta[]

  @@map("opciones_preguntas")
}

model RespuestaEncuesta {
  id             Int                 @id @default(autoincrement())
  encuestaId     Int
  usuarioId      Int
  ciudadanoId    Int?                @map("ciudadano_id")
  fechaRespuesta DateTime            @default(now())
  completada     Boolean             @default(false)
  ciudadano      Usuario?            @relation("CiudadanoEncuesta", fields: [ciudadanoId], references: [id])
  encuesta       Encuesta            @relation(fields: [encuestaId], references: [id])
  usuario        Usuario             @relation("UsuarioEncuesta", fields: [usuarioId], references: [id])
  respuestas     RespuestaPregunta[]

  @@map("respuestas_encuestas")
}

model RespuestaPregunta {
  id                   Int               @id @default(autoincrement())
  respuestaEncuestaId  Int
  preguntaId           Int
  opcionSeleccionadaId Int?
  textoRespuesta       String?
  valorEscala          Int?
  opcionSeleccionada   OpcionPregunta?   @relation(fields: [opcionSeleccionadaId], references: [id])
  pregunta             Pregunta          @relation(fields: [preguntaId], references: [id])
  respuestaEncuesta    RespuestaEncuesta @relation(fields: [respuestaEncuestaId], references: [id], onDelete: Cascade)

  @@map("respuestas_preguntas")
}

model Pqrs {
  id                   Int           @id @default(autoincrement()) @map("id_solicitud")
  descripcion          String
  motivo               String        @db.VarChar(200)
  categoria            CategoriaPqrs
  estado               EstadoPqrs    @default(Abierto)
  seguimiento          String?       @db.VarChar(255)
  fechaCreacion        DateTime      @default(now()) @map("fecha_creacion")
  idCiudadano          Int           @map("id_ciudadano")
  idUsuarioCreador     Int           @map("id_usuario_creador")
  idUsuarioModificador Int?          @map("id_usuario_modificador")
  ciudadano            Usuario       @relation("CiudadanoPqrs", fields: [idCiudadano], references: [id], onDelete: Cascade)
  creador              Usuario       @relation("CreadorPqrs", fields: [idUsuarioCreador], references: [id])
  modificador          Usuario?      @relation("ModificadorPqrs", fields: [idUsuarioModificador], references: [id])

  @@index([estado, fechaCreacion])
}

model FormularioTipo {
  id            Int               @id @default(autoincrement())
  nombre        String            @db.VarChar(100)
  descripcion   String?
  activo        Boolean           @default(true)
  creadorId     Int
  fechaCreacion DateTime          @default(now()) @map("fecha_creacion")
  rutas         Rutas[]
  campos        CampoFormulario[]
  creador       Usuario           @relation("CreadorFormularioTipo", fields: [creadorId], references: [id])
  formularios   Formulario[]

  @@map("formulario_tipos")
}

model CampoFormulario {
  id               Int            @id @default(autoincrement())
  formularioTipoId Int
  nombre           String         @db.VarChar(100)
  descripcion      String?
  tipo             TipoCampo
  requerido        Boolean        @default(false)
  orden            Int
  opciones         String?
  formularioTipo   FormularioTipo @relation(fields: [formularioTipoId], references: [id], onDelete: Cascade)
  valores          ValorCampo[]

  @@map("campo_formularios")
}

model Formulario {
  id               Int              @id @default(autoincrement())
  formularioTipoId Int
  titulo           String           @db.VarChar(200)
  descripcion      String?
  estado           EstadoFormulario @default(borrador)
  creadorId        Int
  fechaCreacion    DateTime         @default(now()) @map("fecha_creacion")
  fechaEnvio       DateTime?        @map("fecha_envio")
  tareaId          Int?             @unique
  creador          Usuario          @relation("CreadorFormulario", fields: [creadorId], references: [id])
  formularioTipo   FormularioTipo   @relation(fields: [formularioTipoId], references: [id])
  tarea            Tarea?           @relation(fields: [tareaId], references: [id])
  valores          ValorCampo[]

  @@map("formularios")
}

model ValorCampo {
  id                Int             @id @default(autoincrement())
  formularioId      Int
  campoFormularioId Int
  valorTexto        String?
  valorNumero       Int?
  valorDecimal      Decimal?        @db.Decimal(10, 5)
  valorFecha        DateTime?
  campoFormulario   CampoFormulario @relation(fields: [campoFormularioId], references: [id])
  formulario        Formulario      @relation(fields: [formularioId], references: [id], onDelete: Cascade)

  @@map("valor_campos")
}

model Multimedia {
  id            Int     @id @default(autoincrement()) @map("id_multimedia")
  url           String  @map("url_archivo") @db.VarChar(200)
  nombreArchivo String  @map("nombre_archivo") @db.VarChar(150) 
  tamanoArchivo Decimal @map("tamano_archivo") @db.Decimal(10, 2)
  tipoArchivo   String  @map("tipo_archivo") @db.VarChar(50) 
  ancho         Int?    @map("ancho") 
  alto          Int?    @map("alto")  
  fechaSubida   DateTime @map("fecha_subida") @default(now())
}

model Incidencias {
  id                    Int              @id @default(autoincrement()) @map("id_incidencia")
  fechaIncidencia       DateTime         @map("fecha_incidencia")
  tituloIncidencia      String           @map("titulo_incidencia") @db.VarChar(200)
  descripcionIncidencia String           @map("descripcion_incidencia")
  tipoIncidencia        String           @map("tipo_incidencia") @db.VarChar(200)
  estadoIncidencia      EstadoIncidencia @default(abierta) @map("estado_incidencia")
  idUsuario             Int?             @map("id_usuario")
  idUsuarioCiudadano    Int?             @map("id_usuario_ciudadano")
  idUsuarioCreador      Int              @map("id_usuario_creador")
  idUsuarioModificador  Int?             @map("id_usuario_modificador")
  ciudadano             Usuario?         @relation("CiudadanoIncidencia", fields: [idUsuarioCiudadano], references: [id])
  creador               Usuario          @relation("CreadorIncidencia", fields: [idUsuarioCreador], references: [id])
  usuarioAsignado       Usuario?         @relation("UsuarioAsignado", fields: [idUsuario], references: [id])
  modificador           Usuario?         @relation("ModificadorIncidencia", fields: [idUsuarioModificador], references: [id])
}

// This is a Prisma schema file
// More information: https://pris.ly/d/prisma-schema

model Cliente {
  id            Int      @id @default(autoincrement()) @map("id_cliente")
  nombre        String   @db.VarChar(100)
  apellido      String   @db.VarChar(100)
  correo        String   @unique @db.VarChar(150)
  telefono      String   @db.VarChar(20)
  direccion     String?
  fechaRegistro DateTime @default(now()) @map("fecha_registro")
  // Eliminamos fechaPagoFijo ya que esto se manejar√° en cada plan de pago
  activo        Boolean  @default(true)
  planes        PlanPago[]
  pagos         Pago[]
}

// Nuevo modelo para manejar planes de pago recurrentes
model PlanPago {
  id               Int       @id @default(autoincrement()) @map("id_plan")
  idCliente        Int       @map("id_cliente")
  descripcion      String    @db.VarChar(200)
  montoPeriodico   Decimal   @map("monto_periodico") @db.Decimal(10, 2)
  diaPago          Int       @map("dia_pago") // D√≠a del mes para el pago (1-31)
  periodicidad     Periodicidad @default(mensual) // Frecuencia de pago
  fechaInicio      DateTime  @map("fecha_inicio") @db.Date
  fechaFin         DateTime? @map("fecha_fin") @db.Date // Null si es indefinido
  activo           Boolean   @default(true)
  cliente          Cliente   @relation(fields: [idCliente], references: [id], onDelete: Cascade)
  pagos            Pago[]    // Relaci√≥n con los pagos generados por este plan
}


model Pago {
  id                 Int         @id @default(autoincrement()) @map("id_pago")
  idCliente          Int         @map("id_cliente")
  idPlanPago         Int?        @map("id_plan") // Opcional, si est√° vinculado a un plan
  descripcion        String      @db.VarChar(200)
  fechaEmision       DateTime    @default(now()) @map("fecha_emision") // Cu√°ndo se gener√≥ el cobro
  fechaVencimiento   DateTime    @map("fecha_vencimiento") @db.Date // Fecha l√≠mite de pago
  montoPago          Decimal     @map("monto_pago") @db.Decimal(10, 2) // Monto total a pagar
  

  transacciones      Transaccion[]
  

  montoPagado        Decimal     @default(0.00) @map("monto_pagado") @db.Decimal(10, 2)
  saldoPendiente     Decimal     @default(0.00) @map("saldo_pendiente") @db.Decimal(10, 2)
  interesMora        Decimal     @default(0.00) @map("interes_mora") @db.Decimal(10, 2)
  diasMora           Int         @default(0) @map("dias_mora")
  estadoPago         EstadoPago  @default(pendiente) @map("estado_pago")
  
  // Referencias
  cliente            Cliente     @relation(fields: [idCliente], references: [id], onDelete: Cascade)
  planPago           PlanPago?   @relation(fields: [idPlanPago], references: [id], onDelete: SetNull)
  
  // Otros campos √∫tiles
  notas              String?     @db.VarChar(500)
  ultimaActualizacion DateTime   @default(now()) @updatedAt @map("ultima_actualizacion")
}

// Nuevo modelo para registrar cada transacci√≥n de pago
model Transaccion {
  id           Int        @id @default(autoincrement()) @map("id_transaccion")  
  idPago       Int        @map("id_pago")
  fechaPago    DateTime   @default(now()) @map("fecha_pago")
  monto        Decimal    @db.Decimal(10, 2)
  metodoPago   MetodoPago @map("metodo_pago")
  referencia   String?    @db.VarChar(100) // Referencia de transacci√≥n
  comprobante  String?    @db.VarChar(255) // Ruta de archivo del comprobante
  
  // Referencias
  pago         Pago       @relation(fields: [idPago], references: [id], onDelete: Cascade)
}

model Tarea {
  id              Int            @id @default(autoincrement())
  titulo          String         @db.VarChar(200)
  descripcion     String?
  estado          EstadoTarea    @default(por_hacer)
  prioridad       PrioridadTarea @default(media)
  asignadoId      Int
  creadorId       Int
  fechaCreacion   DateTime       @default(now()) @map("fecha_creacion")
  fechaLimite     DateTime?      @map("fecha_limite")
  fechaCompletada DateTime?      @map("fecha_completada")
  archivada       Boolean        @default(false)
  rutaId          Int?
  formulario      Formulario?
  asignado        Usuario        @relation("TareaAsignado", fields: [asignadoId], references: [id])
  creador         Usuario        @relation("TareaCreador", fields: [creadorId], references: [id])
  ruta            Rutas?         @relation("TareaRuta", fields: [rutaId], references: [id])

  @@map("tareas")
}

model Ubicaciones {
  id         Int          @id @default(autoincrement()) @map("id_ubicacion")
  nombre     String       @db.VarChar(255)
  latitud    Decimal?     @db.Decimal(10, 8)
  longitud   Decimal?     @db.Decimal(11, 8)
  puntosRuta PuntosRuta[]
}

model Rutas {
  id                 Int                  @id @default(autoincrement()) @map("id_ruta")
  nombre             String               @db.VarChar(255)
  horaInicio         DateTime?
  horaFin            DateTime?
  usuarioAsignadoId  Int?
  formularioTipoId   Int?
  puntosRuta         PuntosRuta[]
  formularioTipo     FormularioTipo?      @relation(fields: [formularioTipoId], references: [id])
  usuarioAsignado    Usuario?             @relation(fields: [usuarioAsignadoId], references: [id])
  vehiculosAsignados VehiculosAsignados[]
  tareas             Tarea[]              @relation("TareaRuta")
}

model PuntosRuta {
  id          Int         @id @default(autoincrement()) @map("id_punto_ruta")
  idRuta      Int         @map("id_ruta")
  idUbicacion Int         @map("id_ubicacion")
  orden       Int
  ruta        Rutas       @relation(fields: [idRuta], references: [id], onDelete: Cascade)
  ubicacion   Ubicaciones @relation(fields: [idUbicacion], references: [id], onDelete: Cascade)
}

model Vehiculos {
  id                 Int                  @id @default(autoincrement()) @map("id_auto")
  modelo             String               @db.VarChar(50)
  placa              String               @unique @db.VarChar(20)
  marca              String               @db.VarChar(50)
  vehiculosAsignados VehiculosAsignados[]
}

model VehiculosAsignados {
  id              Int       @id @default(autoincrement()) @map("id_vehiculo_asignado")
  idVehiculo      Int       @map("id_vehiculo")
  idRuta          Int       @map("id_ruta")
  fechaAsignacion DateTime  @default(now())
  ruta            Rutas     @relation(fields: [idRuta], references: [id], onDelete: Cascade)
  vehiculo        Vehiculos @relation(fields: [idVehiculo], references: [id], onDelete: Cascade)
}


model DocumentoPdf {
  id            Int      @id @default(autoincrement()) @map("id_pdf")
  url           String   @map("url_archivo") @db.VarChar(200)
  nombreArchivo String   @map("nombre_archivo") @db.VarChar(150)
  tamanoArchivo Decimal  @map("tamano_archivo") @db.Decimal(10, 2)
  tipoArchivo   String   @map("tipo_archivo") @db.VarChar(50) // "application/pdf"
  paginas       Int?     @map("paginas")
  fechaSubida   DateTime @map("fecha_subida") @default(now())

  tipoDocumento TipoDocumento @map("tipo_documento")  // Ahora es un ENUM
  referenciaId  Int?          @map("referencia_id")   // Relaciona con pagos, informes, certificados

  @@unique([tipoDocumento, referenciaId]) // Garantiza que solo haya un PDF por tipo para cada referencia
}

enum TipoDocumento {
  FACTURA
  CERTIFICADO
  INFORME
}

enum Rol {
  administrador
  recolector
  ciudadano
  encuestador
  encuestado
}

enum EstadoCiudadano {
  activo
  inactivo
}

enum EstadoResiduo {
  disponible
  en_proceso
  reciclado
}

enum EstadoEncuesta {
  activa
  inactiva
  borrador
  finalizada
}

enum TipoPregunta {
  opcion_multiple
  seleccion_unica
  texto_libre
  escala
  si_no
}

enum CategoriaPqrs {
  Reclamo
  Peticion
  Queja
  Sugerencia
}

enum EstadoPqrs {
  Abierto
  En_proceso
  Cerrado
}

enum TipoCampo {
  texto
  numero
  decimal
  fecha
  hora
  fecha_hora
  select
  checkbox
  radio
  textarea
  archivo
  ubicacion
}

enum Periodicidad {
  semanal
  quincenal
  mensual
  bimestral
  trimestral
  semestral
  anual
}

enum MetodoPago {
  efectivo
  tarjeta
  transferencia
  paypal
  otro
}

enum EstadoPago {
  pendiente
  pagadoParcial
  pagadoTotal
  vencido
  cancelado
}

enum EstadoFormulario {
  borrador
  enviado
  aprobado
  rechazado
}

enum EstadoIncidencia {
  abierta
  en_progreso
  cerrada
}


enum FrecuenciaPago {
  mensual
  trimestral
  semestral
  anual
}

enum EstadoTarea {
  por_hacer
  en_progreso
  completada
  cancelado
}

enum PrioridadTarea {
  baja
  media
  alta
  urgente
}